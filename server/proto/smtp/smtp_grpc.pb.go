// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: smtp/smtp.proto

package smtp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SmtpService_SendEncryptedEmail_FullMethodName = "/smtp.SmtpService/SendEncryptedEmail"
	SmtpService_SendPublicEmail_FullMethodName    = "/smtp.SmtpService/SendPublicEmail"
)

// SmtpServiceClient is the client API for SmtpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SmtpServiceClient interface {
	SendEncryptedEmail(ctx context.Context, in *EncryptedEmail, opts ...grpc.CallOption) (*SendEmailResponse, error)
	SendPublicEmail(ctx context.Context, in *PublicEmail, opts ...grpc.CallOption) (*SendEmailResponse, error)
}

type smtpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSmtpServiceClient(cc grpc.ClientConnInterface) SmtpServiceClient {
	return &smtpServiceClient{cc}
}

func (c *smtpServiceClient) SendEncryptedEmail(ctx context.Context, in *EncryptedEmail, opts ...grpc.CallOption) (*SendEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendEmailResponse)
	err := c.cc.Invoke(ctx, SmtpService_SendEncryptedEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smtpServiceClient) SendPublicEmail(ctx context.Context, in *PublicEmail, opts ...grpc.CallOption) (*SendEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendEmailResponse)
	err := c.cc.Invoke(ctx, SmtpService_SendPublicEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmtpServiceServer is the server API for SmtpService service.
// All implementations must embed UnimplementedSmtpServiceServer
// for forward compatibility.
type SmtpServiceServer interface {
	SendEncryptedEmail(context.Context, *EncryptedEmail) (*SendEmailResponse, error)
	SendPublicEmail(context.Context, *PublicEmail) (*SendEmailResponse, error)
	mustEmbedUnimplementedSmtpServiceServer()
}

// UnimplementedSmtpServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSmtpServiceServer struct{}

func (UnimplementedSmtpServiceServer) SendEncryptedEmail(context.Context, *EncryptedEmail) (*SendEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEncryptedEmail not implemented")
}
func (UnimplementedSmtpServiceServer) SendPublicEmail(context.Context, *PublicEmail) (*SendEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPublicEmail not implemented")
}
func (UnimplementedSmtpServiceServer) mustEmbedUnimplementedSmtpServiceServer() {}
func (UnimplementedSmtpServiceServer) testEmbeddedByValue()                     {}

// UnsafeSmtpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SmtpServiceServer will
// result in compilation errors.
type UnsafeSmtpServiceServer interface {
	mustEmbedUnimplementedSmtpServiceServer()
}

func RegisterSmtpServiceServer(s grpc.ServiceRegistrar, srv SmtpServiceServer) {
	// If the following call pancis, it indicates UnimplementedSmtpServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SmtpService_ServiceDesc, srv)
}

func _SmtpService_SendEncryptedEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptedEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmtpServiceServer).SendEncryptedEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmtpService_SendEncryptedEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmtpServiceServer).SendEncryptedEmail(ctx, req.(*EncryptedEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmtpService_SendPublicEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmtpServiceServer).SendPublicEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmtpService_SendPublicEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmtpServiceServer).SendPublicEmail(ctx, req.(*PublicEmail))
	}
	return interceptor(ctx, in, info, handler)
}

// SmtpService_ServiceDesc is the grpc.ServiceDesc for SmtpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SmtpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smtp.SmtpService",
	HandlerType: (*SmtpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEncryptedEmail",
			Handler:    _SmtpService_SendEncryptedEmail_Handler,
		},
		{
			MethodName: "SendPublicEmail",
			Handler:    _SmtpService_SendPublicEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "smtp/smtp.proto",
}
